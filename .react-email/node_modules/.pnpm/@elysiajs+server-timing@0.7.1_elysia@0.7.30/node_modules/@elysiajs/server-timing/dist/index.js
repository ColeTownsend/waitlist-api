import { Elysia } from 'elysia';
const iterate = async (event, process) => {
    let label = '';
    const { skip, time, end, children } = await process;
    if (skip || !children.length)
        return '';
    for (let i = 0; i < children.length; i++) {
        const child = children[i];
        const { name, time, end, skip } = await child;
        if (skip)
            continue;
        label += `${event}.${i}.${name};dur=${(await end) - time},`;
    }
    label = `${event};dur=${(await end) - time},` + label;
    return label;
};
export const serverTiming = (options = {}) => {
    const app = new Elysia();
    const { allow, enabled = process.env.NODE_ENV !== 'production', trace: { request: traceRequest = true, parse: traceParse = true, transform: traceTransform = true, beforeHandle: traceBeforeHandle = true, handle: traceHandle = true, afterHandle: traceAfterHandle = true, total: traceTotal = true } = {} } = options;
    if (enabled) {
        app.trace(async ({ request, parse, transform, beforeHandle, handle, afterHandle, set, context, context: { request: { method } } }) => {
            let label = '';
            const { time: requestStart } = traceTotal
                ? await request
                : { time: 0 };
            if (traceRequest)
                label += await iterate('request', request);
            if (traceParse && method !== 'GET' && method !== 'HEAD')
                label += await iterate('parse', parse);
            if (traceTransform)
                label += await iterate('transform', transform);
            if (traceBeforeHandle)
                label += await iterate('beforeHandle', beforeHandle);
            const { end, time, skip, name } = await handle;
            if (!skip)
                label += `handle.${name};dur=${(await end) - time}`;
            if (traceAfterHandle)
                label += await iterate('afterHandle', afterHandle);
            if (traceTotal) {
                const { end: requestEnd } = await afterHandle;
                label += `total;dur=${(await requestEnd) - requestStart}`;
            }
            set.headers['Server-Timing'] = label;
            let allowed = allow;
            if (allowed instanceof Promise)
                allowed = await allowed;
            switch (typeof allowed) {
                case 'boolean':
                    if (allowed === false)
                        delete set.headers['Server-Timing'];
                    break;
                case 'function':
                    if ((await allowed(context)) === false)
                        delete set.headers['Server-Timing'];
                    break;
            }
        });
    }
    return app;
};
export default serverTiming;
