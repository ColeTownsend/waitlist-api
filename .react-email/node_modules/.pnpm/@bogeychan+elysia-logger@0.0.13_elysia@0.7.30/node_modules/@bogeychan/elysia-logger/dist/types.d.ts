/// <reference types="bun-types" />
import type { pino } from 'pino';
import type { Context, DecoratorBase, Elysia } from 'elysia';
export type StreamLoggerOptions = BaseLoggerOptions & {
    stream?: pino.DestinationStream;
};
export type FileLoggerOptions = BaseLoggerOptions & {
    file: PathLike;
};
export type LoggerOptions = StreamLoggerOptions | FileLoggerOptions;
export type ElysiaLoggerOptions = Pick<BaseLoggerOptions, 'customProps' | 'autoLogging'>;
export type StandaloneLoggerOptions = Omit<LoggerOptions, 'customProps' | 'autoLogging'>;
export interface ElysiaLogger<E extends Elysia = Elysia> extends Logger {
    into(options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<ElysiaLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>;
    into(options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<ElysiaLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin;
    into(options?: ElysiaLoggerOptions): E;
}
type BaseLoggerOptions = Omit<pino.LoggerOptions, 'level'> & {
    level?: pino.LevelWithSilent | (string & {});
    customProps?: <Instance extends Elysia>(ctx: InferContext<Instance>) => object;
    autoLogging?: boolean | {
        ignore: (ctx: Context) => boolean;
    };
};
export type Logger<Options = StandaloneLoggerOptions> = pino.Logger<Options>;
export type InferContext<T extends Elysia> = T extends Elysia<infer Path, infer Decorators, infer _Definitions, infer _ParentSchema, infer Routes> ? Context<Routes, DecoratorBase, Path> & Partial<Decorators['request']> : never;
export type _INTERNAL_Writeonly<T> = {
    -readonly [P in keyof T]: T[P];
};
export type _INTERNAL_ElysiaLoggerPluginAutoLoggingState = {
    readonly startTime?: number;
    readonly endTime?: number;
    readonly responseTime?: number;
};
export type _INTERNAL_ElysiaLoggerPlugin<Store extends Elysia['store'] = Elysia['store']> = Elysia<'', {
    request: {
        log: Logger;
    };
    store: Store;
}>;
export type _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<Options extends BaseLoggerOptions> = Omit<Options, 'autoLogging'> & {
    autoLogging?: true | {
        ignore: (ctx: Context) => boolean;
    };
};
export type _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<Options extends BaseLoggerOptions> = Omit<Options, 'autoLogging'> & {
    autoLogging: false;
};
export {};
