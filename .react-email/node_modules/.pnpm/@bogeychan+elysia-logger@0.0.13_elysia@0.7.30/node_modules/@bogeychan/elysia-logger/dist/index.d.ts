import Elysia from 'elysia';
import type { Logger, ElysiaLogger, FileLoggerOptions, StreamLoggerOptions, ElysiaLoggerOptions, StandaloneLoggerOptions, _INTERNAL_ElysiaLoggerPlugin, _INTERNAL_ElysiaLoggerPluginAutoLoggingState, _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions, _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions } from './types';
export declare function logger(options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<StreamLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>;
export declare function logger(options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<StreamLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin;
export declare function fileLogger(options: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<FileLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>;
export declare function fileLogger(options: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<FileLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin;
export declare function createPinoLogger(options?: StandaloneLoggerOptions): ElysiaLogger<ReturnType<typeof into>>;
declare function into(this: Logger, options?: ElysiaLoggerOptions): Elysia<"", {
    request: {
        log: Logger;
    };
    store: {};
}, {
    type: {};
    error: {};
}, {}, {}, false>;
export * from './config';
export type { InferContext } from './types';
export { pino } from 'pino';
